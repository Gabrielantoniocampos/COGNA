# -*- coding: utf-8 -*-
"""tratamento_catalogo_e_bibliografia.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XslWnEHkw2ka5hxaMUsx_9rwssGQL_YI

## TRATANDO A PLANILHA DE CATÓLOGO DA MINHA BIBLIOTECA
O código padroniza a coluna de referência bibliográfica de acordo com a ABNT e a planilha importada do SAG
"""

import pandas as pd

# Carregar a planilha
df = pd.read_excel("/content/Catálogo MB (1).xlsx")

# Função para tratar a coluna "ABNT"
def tratar_abnt(texto):
    texto = str(texto).replace("<p>", "")  # texto para string
    if "Ebook" in texto:
        texto = texto.split("Ebook")[0]  # Remove tudo a partir de "Ebook"
    return texto.strip()

# Aplicar a função à coluna "ABNT"
df["ABNT"] = df["ABNT"].apply(tratar_abnt)

# Salvar a planilha tratada
df.to_excel("Catálogo MB Tratado.xlsx", index=False)

"""## REMOVENDO OS ESPAÇOS NA REFERÊNCIA"""

import pandas as pd
from openpyxl import load_workbook

def remove_leading_trailing_spaces():
    # Caminho do arquivo de entrada e saída
    input_file = "/content/Atualizando todos cursos 2025.1 (15) (1).xlsx"
    output_file = "Atualizando todos cursos 2025.1_TRATADO.xlsx"  # Adicionado .xlsx
    sheet_name = "Atualizado"
    column_name = "BIBLIOGRAFIA"

    # Carregar a planilha mantendo a formatação
    wb = load_workbook(input_file)
    ws = wb[sheet_name]

    # Identificar a coluna correta
    col_idx = None
    for col in ws.iter_cols(min_row=1, max_row=1):
        if col[0].value == column_name:
            col_idx = col[0].column
            break

    if col_idx is None:
        print(f"Coluna '{column_name}' não encontrada.")
        return

    # Remover espaços no início e no final de cada célula na coluna especificada
    for cell in ws.iter_cols(min_col=col_idx, max_col=col_idx, min_row=2):
        for c in cell:
            if isinstance(c.value, str):
                c.value = c.value.strip()

    # Salvar o arquivo sem alterar a formatação
    wb.save(output_file)
    print(f"Arquivo salvo em: {output_file}")

# Executar a função
remove_leading_trailing_spaces()

"""## CONFERÊNCIA DE ACORDO COM O CATÁLOGO"""

from openpyxl.styles import PatternFill
from openpyxl import load_workbook

def highlight_matching_cells():
    # Caminhos dos arquivos
    file_artes = "/content/ARTES_VISUAIS_ATUALIZADO.xlsx"
    file_catalogo = "/content/Catálogo MB Tratado.xlsx"
    output_file = "ARTES_VISUAIS_DESTACADO.xlsx"

    # Nome das planilhas
    sheet_artes = "RelatorioCursoBibliografia"
    sheet_catalogo = "Sheet1"

    # Carregar os arquivos Excel mantendo a formatação
    wb_artes = load_workbook(file_artes)
    ws_artes = wb_artes[sheet_artes]

    wb_catalogo = load_workbook(file_catalogo)
    ws_catalogo = wb_catalogo[sheet_catalogo]

    # Coletar os valores da coluna R da planilha Catálogo MB (coluna 18)
    valores_catalogo = set()
    for row in ws_catalogo.iter_rows(min_row=2, min_col=18, max_col=18, values_only=True):
        if row[0] is not None:
            valores_catalogo.add(str(row[0]).strip())

    # Definir o preenchimento verde
    fill_green = PatternFill(start_color="00FF00", end_color="00FF00", fill_type="solid")

    # Percorrer a coluna N (coluna 14) da planilha Artes Visuais e aplicar a formatação
    for row in ws_artes.iter_rows(min_row=2, min_col=14, max_col=14):
        cell = row[0]
        if cell.value and str(cell.value).strip() in valores_catalogo:
            cell.fill = fill_green

    # Salvar o arquivo atualizado
    wb_artes.save(output_file)
    print(f"Arquivo salvo em: {output_file}")

# Executar a função
highlight_matching_cells()

"""## CONFERÊNCIA DE ACORDO COM CATÁLOGO E 35 CURSOS"""

from openpyxl.styles import PatternFill
from openpyxl import load_workbook

def highlight_matching_cells():
    try:
        # Caminhos dos arquivos
        file_atualizando_cursos = "/content/TESTADO_ATUALIZADO_FILTRADO (2).xlsx"
        file_catalogo = "/content/Catálogo MB Tratado (2).xlsx"
        file_atualizada = "/content/Atualizada_2025.1_Limpa (1) (1).xlsx"
        output_file = "TESTADO_ATUALIZANDO_CURSOS_V2.xlsx"

        # Nome das planilhas
        sheet_atualizando_cursos = "Atualizado"
        sheet_catalogo = "Sheet1"
        sheet_atualizada = "Atualizando"

        # Carregar os arquivos Excel
        wb_atualizando_cursos = load_workbook(file_atualizando_cursos)
        ws_atualizando_cursos = wb_atualizando_cursos[sheet_atualizando_cursos]

        wb_catalogo = load_workbook(file_catalogo, read_only=True)
        ws_catalogo = wb_catalogo[sheet_catalogo]

        wb_atualizada = load_workbook(file_atualizada, read_only=True)
        ws_atualizada = wb_atualizada[sheet_atualizada]

        # Coletar os valores das colunas relevantes usando set-comprehension
        valores_catalogo = {str(row[0]).strip() for row in ws_catalogo.iter_rows(min_row=2, min_col=18, max_col=18, values_only=True) if row[0]}
        valores_atualizada = {str(row[0]).strip() for row in ws_atualizada.iter_rows(min_row=2, min_col=6, max_col=6, values_only=True) if row[0]}

        # Criar conjunto combinado
        valores_combinados = valores_catalogo.union(valores_atualizada)

        # Definir o preenchimento verde
        fill_green = PatternFill(start_color="00FF00", end_color="00FF00", fill_type="solid")

        # Percorrer a coluna F da planilha "Atualizando cursos" e aplicar a formatação
        for row in ws_atualizando_cursos.iter_rows(min_row=2, min_col=6, max_col=6):
            cell = row[0]
            if cell.value and str(cell.value).strip() in valores_combinados:
                cell.fill = fill_green

        # Salvar o arquivo atualizado
        wb_atualizando_cursos.save(output_file)
        print(f"Arquivo salvo com sucesso em: {output_file}")

    except Exception as e:
        print(f"Ocorreu um erro: {e}")

# Executar a função
highlight_matching_cells()