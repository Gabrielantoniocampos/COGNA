# -*- coding: utf-8 -*-
"""CODIGO_relatorio_referendado

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Vdr8H3WPRpty5pP6v-yg7FqTrfhSfJ1Y
"""

pip install pandas openpyxl python-docx

import pandas as pd
from docx import Document
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT

def criar_documentos_word_por_curso(arquivo_excel, template_word):
    try:
        df = pd.read_excel(arquivo_excel)

        df['CURSO'] = df['CURSO'].astype(str).fillna('')
        df['DISCIPLINA'] = df['DISCIPLINA'].astype(str).fillna('')
        df['SEMESTRE'] = df['SEMESTRE'].astype(str).fillna('')
        df['TIPO'] = df['TIPO'].astype(str).fillna('')
        df['EMENTA'] = df['EMENTA'].astype(str).fillna('')
        df['BIBLIOGRAFIA'] = df['BIBLIOGRAFIA'].astype(str).fillna('')
        df['RELATÓRIO ADEQUAÇÃO REFERENDADO'] = df['RELATÓRIO ADEQUAÇÃO REFERENDADO'].astype(str).fillna('')
        df['COMPETÊNCIA / HABILIDADE'] = df['COMPETÊNCIA / HABILIDADE'].astype(str).fillna('')

        df['EMENTA'] = df['EMENTA'].apply(lambda x: '\n'.join([linha[3:].lstrip() for linha in x.split('\n')]))
        df = df.dropna(subset=['SEMESTRE', 'CURSO'])

        cursos = df['CURSO'].unique()
        for curso in cursos:
            if not curso.strip():
                continue

            df_curso = df[df['CURSO'] == curso].copy()
            df_disciplinas = df_curso[['DISCIPLINA', 'SEMESTRE', 'EMENTA', 'RELATÓRIO ADEQUAÇÃO REFERENDADO']].drop_duplicates()

            documento = gerar_conteudo_curso(df_curso, df_disciplinas)

            template_documento = Document(template_word)
            substituir_placeholder(template_documento, "<INSERIRCONTEUDO>", documento)

            arquivo_saida = f"{curso}.docx".replace("/", "_").replace("\\", "_")
            template_documento.save(arquivo_saida)
            print(f"✅ Documento gerado: {arquivo_saida}")

    except Exception as e:
        print(f"Erro: {e}")

def gerar_conteudo_curso(df_curso, df_disciplinas):
    documento = Document()
    semestres = sorted([int(s) for s in df_disciplinas['SEMESTRE'].unique() if s.isdigit() and s != '0'])

    for semestre in semestres:
        disciplinas = df_disciplinas[df_disciplinas['SEMESTRE'].astype(int) == semestre]

        # Inserir o semestre uma única vez
        p = documento.add_paragraph()
        run = p.add_run(f"{semestre}º Semestre")
        run.bold = True
        p.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

        for _, disciplina in disciplinas.iterrows():
            adicionar_texto_negrito(documento, "Nome da disciplina:")
            documento.add_paragraph(disciplina['DISCIPLINA'])

            adicionar_texto_negrito(documento, "Ementa:")
            documento.add_paragraph(disciplina['EMENTA'])

            bibliografias = df_curso[df_curso['DISCIPLINA'] == disciplina['DISCIPLINA']]
            competencias = bibliografias['COMPETÊNCIA / HABILIDADE'].dropna().unique()
            if len(competencias) > 0:
                adicionar_texto_negrito(documento, "Competências e Habilidades:")
                for comp in competencias:
                    documento.add_paragraph(comp)

            adicionar_bibliografia(documento, bibliografias, "Básica")
            adicionar_bibliografia(documento, bibliografias, "Complementar")

            adicionar_texto_negrito(documento, "Adequação Referendado:")
            documento.add_paragraph(disciplina['RELATÓRIO ADEQUAÇÃO REFERENDADO'])

    # Disciplinas optativas
    optativas = df_disciplinas[df_disciplinas['SEMESTRE'] == '0']
    if not optativas.empty:
        p = documento.add_paragraph()
        run = p.add_run("Disciplinas optativas")
        run.bold = True
        p.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

        for _, disciplina in optativas.iterrows():
            adicionar_texto_negrito(documento, "Nome da disciplina:")
            documento.add_paragraph(disciplina['DISCIPLINA'])

            adicionar_texto_negrito(documento, "Ementa:")
            documento.add_paragraph(disciplina['EMENTA'])

            bibliografias = df_curso[df_curso['DISCIPLINA'] == disciplina['DISCIPLINA']]

            competencias = bibliografias['COMPETÊNCIA / HABILIDADE'].dropna().unique()
            if len(competencias) > 0:
                adicionar_texto_negrito(documento, "Competências e Habilidades:")
                for comp in competencias:
                    documento.add_paragraph(comp)

            adicionar_bibliografia(documento, bibliografias, "Básica")
            adicionar_bibliografia(documento, bibliografias, "Complementar")

            adicionar_texto_negrito(documento, "Adequação Referendado:")
            documento.add_paragraph(disciplina['RELATÓRIO ADEQUAÇÃO REFERENDADO'])

    return documento

def adicionar_texto_negrito(documento, texto):
    p = documento.add_paragraph()
    run = p.add_run(texto)
    run.bold = True

def adicionar_bibliografia(documento, df, tipo):
    adicionar_texto_negrito(documento, f"Bibliografia {tipo}:")
    df['BIBLIOGRAFIA'] = df['BIBLIOGRAFIA'].astype(str).fillna('')
    bibliografias = df[df['TIPO'].str.contains(tipo, na=False)]['BIBLIOGRAFIA'].dropna().drop_duplicates()
    for bibliografia in bibliografias:
        documento.add_paragraph(bibliografia)

def substituir_placeholder(template_documento, placeholder, documento):
    for paragrafo in template_documento.paragraphs:
        if placeholder in paragrafo.text:
            paragrafo.text = paragrafo.text.replace(placeholder, "")
            for par in documento.paragraphs:
                novo_par = template_documento.add_paragraph()
                for run in par.runs:
                    novo_run = novo_par.add_run(run.text)
                    novo_run.bold = run.bold
                    novo_run.italic = run.italic

# Caminho dos arquivos (modifique conforme necessário)
arquivo_excel = "/content/BIBLIOGRAFIAS_CIÊNCIA_DA_COMPUTAÇÃO_-_BACHARELADO.xlsx"
template_word = "/content/TEMPLATE RELAT. DE ADEQUACAO REFERENDADO.docx"

# Chamada da função
criar_documentos_word_por_curso(arquivo_excel, template_word)